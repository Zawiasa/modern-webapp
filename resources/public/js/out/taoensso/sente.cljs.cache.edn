;; Analyzed by ClojureScript 1.7.122
{:use-macros {warnf taoensso.timbre, go cljs.core.async.macros, have taoensso.encore, go-loop cljs.core.async.macros, have? taoensso.encore, debugf taoensso.timbre, tracef taoensso.timbre, infof taoensso.timbre, errorf taoensso.timbre}, :excludes #{}, :name taoensso.sente, :imports nil, :requires {timbre taoensso.timbre, interfaces taoensso.sente.interfaces, async cljs.core.async, taoensso.sente.interfaces taoensso.sente.interfaces, cljs.core.async cljs.core.async, enc taoensso.encore, taoensso.timbre taoensso.timbre, str clojure.string, clojure.string clojure.string, taoensso.encore taoensso.encore}, :uses {<! cljs.core.async, swap-in! taoensso.encore, chan cljs.core.async, format taoensso.encore, swapped taoensso.encore, reset-in! taoensso.encore, >! cljs.core.async, put! cljs.core.async}, :defs {assert-send-args {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 657, :column 8, :end-line 657, :end-column 24, :private true, :arglists (quote ([x ?timeout-ms ?cb]))}, :private true, :name taoensso.sente/assert-send-args, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 24, :method-params ([x ?timeout-ms ?cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 657, :end-line 657, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x ?timeout-ms ?cb]))}, map->ChAjaxSocket {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 874, :column 12, :end-line 874, :end-column 24, :internal-ctor true, :factory :map, :arglists (quote ([G__30298]))}, :name taoensso.sente/map->ChAjaxSocket, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 24, :method-params ([G__30298]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 874, :end-line 874, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__30298]))}, as-event {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 109, :column 7, :end-line 109, :end-column 15, :arglists (quote ([x]))}, :name taoensso.sente/as-event, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, chsk-send!* {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 644, :column 4, :end-line 644, :end-column 15, :protocol taoensso.sente/IChSocket, :doc "Implementation detail.", :arglists (quote ([chsk ev opts]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/chsk-send!*, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 15, :method-params ([chsk ev opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 640, :end-line 644, :max-fixed-arity 3, :fn-var true, :arglists (quote ([chsk ev opts])), :doc "Implementation detail."}, pack {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 199, :column 8, :end-line 199, :end-column 12, :private true, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :private true, :name taoensso.sente/pack, :variadic true, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, chsk-send! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 647, :column 7, :end-line 647, :end-column 17, :arglists (quote ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts])), :doc "Sends `[ev-id ev-?data :as event]`, returns true on apparent success.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists-meta (nil nil nil)}}, :name taoensso.sente/chsk-send!, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :arglists-meta (nil nil nil)}, :method-params ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 647, :end-line 647, :max-fixed-arity 4, :fn-var true, :arglists ([chsk ev] [chsk ev ?timeout-ms ?cb] [chsk ev opts]), :doc "Sends `[ev-id ev-?data :as event]`, returns true on apparent success."}, validate-event {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 98, :column 8, :end-line 98, :end-column 22, :private true, :arglists (quote ([x]))}, :private true, :name taoensso.sente/validate-event, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, event? {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 107, :column 7, :end-line 107, :end-column 13, :arglists (quote ([x])), :doc "Valid [ev-id ?ev-data] form?"}, :name taoensso.sente/event?, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Valid [ev-id ?ev-data] form?"}, event-msg? {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 124, :column 7, :end-line 124, :end-column 17, :arglists (quote ([x]))}, :name taoensso.sente/event-msg?, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, make-channel-socket! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 994, :column 7, :end-line 994, :end-column 27, :arglists (quote ([path & [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts]])), :doc "Returns a map with keys:\n    :ch-recv ; core.async channel to receive `event-msg`s (internal or from clients).\n             ; May `put!` (inject) arbitrary `event`s to this channel.\n    :send-fn ; (fn [event & [?timeout-ms ?cb-fn]]) for client>server send.\n    :state   ; Watchable, read-only (atom {:type _ :open? _ :uid _ :csrf-token _}).\n    :chsk    ; IChSocket implementer. You can usu. ignore this.\n\n  Common options:\n    :type           ; e/o #{:auto :ws :ajax}. You'll usually want the default (:auto)\n    :host           ; Server host (defaults to current page's host)\n    :params         ; Map of any params to incl. in chsk Ring requests (handy for\n                    ; application-level auth, etc.)\n    :ws-kalive-ms   ; Ping to keep a WebSocket conn alive if no activity w/in given\n                    ; number of milliseconds\n    :lp-timeout-ms  ; Ping to keep a long-polling (Ajax) conn alive '' [1]\n    :packer         ; :edn (default), or an IPacker implementation (experimental)\n    :ajax-opts      ; Base opts map provided to `taoensso.encore/ajax-lite`\n    :wrap-recv-evs? ; Should events from server be wrapped in [:chsk/recv _]?\n\n  [1] If you're using Immutant and override the default :lp-timeout-ms, you'll\n      need to provide the same timeout value to\n      `taoensso.sente.server-adapters.immutant/make-immutant-adapter` and use\n      the result of that function as the web server adapter to your server-side\n      `make-channel-socket!`.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts])], :arglists ([path & [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts]]), :arglists-meta (nil)}}, :name taoensso.sente/make-channel-socket!, :variadic true, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(path [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts])], :arglists ([path & [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts]]), :arglists-meta (nil)}, :method-params [(path [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 994, :end-line 994, :max-fixed-arity 1, :fn-var true, :arglists ([path & [{:keys [type host params recv-buf-or-n ws-kalive-ms lp-timeout-ms packer client-id ajax-opts wrap-recv-evs? backoff-ms-fn], :as opts, :or {type :auto, recv-buf-or-n (async/sliding-buffer 2048), ws-kalive-ms 25000, lp-timeout-ms 25000, packer :edn, client-id (or (:client-uuid opts) (enc/uuid-str)), wrap-recv-evs? true, backoff-ms-fn enc/exp-backoff}} _deprecated-more-opts]]), :doc "Returns a map with keys:\n    :ch-recv ; core.async channel to receive `event-msg`s (internal or from clients).\n             ; May `put!` (inject) arbitrary `event`s to this channel.\n    :send-fn ; (fn [event & [?timeout-ms ?cb-fn]]) for client>server send.\n    :state   ; Watchable, read-only (atom {:type _ :open? _ :uid _ :csrf-token _}).\n    :chsk    ; IChSocket implementer. You can usu. ignore this.\n\n  Common options:\n    :type           ; e/o #{:auto :ws :ajax}. You'll usually want the default (:auto)\n    :host           ; Server host (defaults to current page's host)\n    :params         ; Map of any params to incl. in chsk Ring requests (handy for\n                    ; application-level auth, etc.)\n    :ws-kalive-ms   ; Ping to keep a WebSocket conn alive if no activity w/in given\n                    ; number of milliseconds\n    :lp-timeout-ms  ; Ping to keep a long-polling (Ajax) conn alive '' [1]\n    :packer         ; :edn (default), or an IPacker implementation (experimental)\n    :ajax-opts      ; Base opts map provided to `taoensso.encore/ajax-lite`\n    :wrap-recv-evs? ; Should events from server be wrapped in [:chsk/recv _]?\n\n  [1] If you're using Immutant and override the default :lp-timeout-ms, you'll\n      need to provide the same timeout value to\n      `taoensso.sente.server-adapters.immutant/make-immutant-adapter` and use\n      the result of that function as the web server adapter to your server-side\n      `make-channel-socket!`."}, chsk-init! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 641, :column 4, :end-line 641, :end-column 14, :protocol taoensso.sente/IChSocket, :doc "Implementation detail.", :arglists (quote ([chsk]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/chsk-init!, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 14, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 640, :end-line 641, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk])), :doc "Implementation detail."}, get-chsk-url {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 988, :column 8, :end-line 988, :end-column 20, :private true, :arglists (quote ([protocol chsk-host chsk-path type]))}, :private true, :name taoensso.sente/get-chsk-url, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 20, :method-params ([protocol chsk-host chsk-path type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 988, :end-line 988, :max-fixed-arity 4, :fn-var true, :arglists (quote ([protocol chsk-host chsk-path type]))}, chsk-destroy! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 642, :column 4, :end-line 642, :end-column 17, :protocol taoensso.sente/IChSocket, :doc "Kills socket, stops auto-reconnects.", :arglists (quote ([chsk]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/chsk-destroy!, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 17, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 640, :end-line 642, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk])), :doc "Kills socket, stops auto-reconnects."}, ->ChAjaxSocket {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 874, :column 12, :end-line 874, :end-column 24, :internal-ctor true, :factory :positional, :arglists (quote ([client-id url params chs timeout-ms ajax-opts curr-xhr_ state_ packer backoff-ms-fn]))}, :name taoensso.sente/->ChAjaxSocket, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 24, :method-params ([client-id url params chs timeout-ms ajax-opts curr-xhr_ state_ packer backoff-ms-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 874, :end-line 874, :max-fixed-arity 10, :fn-var true, :arglists (quote ([client-id url params chs timeout-ms ajax-opts curr-xhr_ state_ packer backoff-ms-fn]))}, ChAjaxSocket {:num-fields 10, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative taoensso.sente/IChSocket cljs.core/IMap cljs.core/ILookup}, :name taoensso.sente/ChAjaxSocket, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 24, :type true, :column 12, :internal-ctor true, :line 874, :record true, :end-line 874, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, set-logging-level! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 1196, :column 7, :end-line 1196, :end-column 25, :arglists (quote ([level])), :doc "DEPRECATED. Please use `timbre/set-level!` instead."}, :name taoensso.sente/set-logging-level!, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 25, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1196, :end-line 1196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level])), :doc "DEPRECATED. Please use `timbre/set-level!` instead."}, start-chsk-router! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 1148, :column 7, :end-line 1148, :end-column 25, :arglists (quote ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]])), :doc "Creates a go-loop to call `(event-msg-handler <event-msg>)` and returns a\n  `(fn stop! [])`. Catches & logs errors. Advanced users may choose to instead\n  write their own loop against `ch-recv`.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :arglists-meta (nil)}}, :name taoensso.sente/start-chsk-router!, :variadic true, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :arglists-meta (nil)}, :method-params [(ch-recv event-msg-handler [{:as opts, :keys [trace-evs? error-handler]}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1148, :end-line 1148, :max-fixed-arity 2, :fn-var true, :arglists ([ch-recv event-msg-handler & [{:as opts, :keys [trace-evs? error-handler]}]]), :doc "Creates a go-loop to call `(event-msg-handler <event-msg>)` and returns a\n  `(fn stop! [])`. Catches & logs errors. Advanced users may choose to instead\n  write their own loop against `ch-recv`."}, pack* {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 187, :column 8, :end-line 187, :end-column 13, :private true, :arglists (quote ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid])), :doc "clj->prefixed-pstr", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :arglists ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :arglists-meta (nil nil)}}, :private true, :name taoensso.sente/pack*, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :arglists ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :arglists-meta (nil nil)}, :method-params ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 4, :fn-var true, :arglists ([packer ?packer-meta clj] [packer ?packer-meta clj ?cb-uuid]), :doc "clj->prefixed-pstr"}, receive-buffered-evs! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 709, :column 8, :end-line 709, :end-column 29, :private true, :arglists (quote ([chs clj]))}, :private true, :name taoensso.sente/receive-buffered-evs!, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 29, :method-params ([chs clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 709, :end-line 709, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chs clj]))}, unpack {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 204, :column 8, :end-line 204, :end-column 14, :private true, :arglists (quote ([packer prefixed-pstr])), :doc "prefixed-pstr->[clj ?cb-uuid]"}, :private true, :name taoensso.sente/unpack, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 14, :method-params ([packer prefixed-pstr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 2, :fn-var true, :arglists (quote ([packer prefixed-pstr])), :doc "prefixed-pstr->[clj ?cb-uuid]"}, default-chsk-url-fn {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 1207, :column 6, :end-line 1207, :end-column 25}, :name taoensso.sente/default-chsk-url-fn, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 25, :method-params ([path p__30558 websocket?]), :protocol-impl nil, :arglists-meta (), :column 1, :line 1207, :end-line 1207, :max-fixed-arity 3, :fn-var true, :arglists nil, :doc "DEPRECATED."}, start-chsk-router-loop! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 1189, :column 7, :end-line 1189, :end-column 30, :arglists (quote ([event-handler ch-recv])), :doc "DEPRECATED: Please use `start-chsk-router!` instead."}, :name taoensso.sente/start-chsk-router-loop!, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 30, :method-params ([event-handler ch-recv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1189, :end-line 1189, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event-handler ch-recv])), :doc "DEPRECATED: Please use `start-chsk-router!` instead."}, ajax-call {:name taoensso.sente/ajax-call, :file "resources/public/js/out/taoensso/sente.cljs", :line 1202, :column 1, :end-line 1202, :end-column 15, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 1202, :column 6, :end-line 1202, :end-column 15}, :doc "DEPRECATED. Please use `taoensso.encore/ajax-lite` instead."}, handle-when-handshake! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 717, :column 8, :end-line 717, :end-column 30, :private true, :arglists (quote ([chsk chs clj]))}, :private true, :name taoensso.sente/handle-when-handshake!, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 30, :method-params ([chsk chs clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 717, :end-line 717, :max-fixed-arity 3, :fn-var true, :arglists (quote ([chsk chs clj]))}, ChWebSocket {:num-fields 13, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative taoensso.sente/IChSocket cljs.core/IMap cljs.core/ILookup}, :name taoensso.sente/ChWebSocket, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 23, :type true, :column 12, :internal-ctor true, :line 757, :record true, :end-line 757, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, pull-unused-cb-fn! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 667, :column 8, :end-line 667, :end-column 26, :private true, :arglists (quote ([cbs-waiting_ ?cb-uuid]))}, :private true, :name taoensso.sente/pull-unused-cb-fn!, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 26, :method-params ([cbs-waiting_ ?cb-uuid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 667, :end-line 667, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cbs-waiting_ ?cb-uuid]))}, assert-event {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 111, :column 7, :end-line 111, :end-column 19, :arglists (quote ([x]))}, :name taoensso.sente/assert-event, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, chsk-reconnect! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 643, :column 4, :end-line 643, :end-column 19, :protocol taoensso.sente/IChSocket, :doc "Drops connection, allows auto-reconnect. Useful for reauthenticating after login/logout.", :arglists (quote ([chsk]))}, :protocol taoensso.sente/IChSocket, :name taoensso.sente/chsk-reconnect!, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 19, :method-params ([chsk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 640, :end-line 643, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chsk])), :doc "Drops connection, allows auto-reconnect. Useful for reauthenticating after login/logout."}, with-?meta {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 186, :column 8, :end-line 186, :end-column 18, :private true, :arglists (quote ([x ?m]))}, :private true, :name taoensso.sente/with-?meta, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 18, :method-params ([x ?m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x ?m]))}, set-exp-backoff-timeout! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 752, :column 7, :end-line 752, :end-column 31, :arglists (quote ([nullary-f nattempt & [backoff-ms-fn]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(nullary-f nattempt [backoff-ms-fn])], :arglists ([nullary-f nattempt & [backoff-ms-fn]]), :arglists-meta (nil)}}, :name taoensso.sente/set-exp-backoff-timeout!, :variadic true, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(nullary-f nattempt [backoff-ms-fn])], :arglists ([nullary-f nattempt & [backoff-ms-fn]]), :arglists-meta (nil)}, :method-params [(nullary-f nattempt [backoff-ms-fn])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 752, :end-line 752, :max-fixed-arity 2, :fn-var true, :arglists ([nullary-f nattempt & [backoff-ms-fn]])}, cb-chan-as-fn {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 694, :column 8, :end-line 694, :end-column 21, :private true, :arglists (quote ([?cb ev])), :doc "Experimental, undocumented. Allows a core.async channel to be provided\n  instead of a cb-fn. The channel will receive values of form\n  [<event-id>.cb <reply>]."}, :private true, :name taoensso.sente/cb-chan-as-fn, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 21, :method-params ([?cb ev]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 694, :end-line 694, :max-fixed-arity 2, :fn-var true, :arglists (quote ([?cb ev])), :doc "Experimental, undocumented. Allows a core.async channel to be provided\n  instead of a cb-fn. The channel will receive values of form\n  [<event-id>.cb <reply>]."}, IChSocket {:meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 640, :column 14, :end-line 640, :end-column 23, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {chsk-init! [[chsk]], chsk-destroy! [[chsk]], chsk-reconnect! [[chsk]], chsk-send!* [[chsk ev opts]]}}}, :protocol-symbol true, :name taoensso.sente/IChSocket, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 23, :column 1, :line 640, :protocol-info {:methods {chsk-init! [[chsk]], chsk-destroy! [[chsk]], chsk-reconnect! [[chsk]], chsk-send!* [[chsk ev opts]]}}, :info nil, :end-line 640, :impls #{taoensso.sente/ChWebSocket taoensso.sente/ChAjaxSocket}, :doc nil, :jsdoc ("@interface")}, cb-success? {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 169, :column 7, :end-line 169, :end-column 18, :arglists (quote ([cb-reply-clj])), :doc "Note that cb reply need _not_ be `event` form!"}, :name taoensso.sente/cb-success?, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 18, :method-params ([cb-reply-clj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cb-reply-clj])), :doc "Note that cb reply need _not_ be `event` form!"}, ->ChWebSocket {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 757, :column 12, :end-line 757, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([client-id url params chs socket_ kalive-ms kalive-timer_ kalive-due?_ nattempt_ cbs-waiting_ state_ packer backoff-ms-fn]))}, :name taoensso.sente/->ChWebSocket, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 23, :method-params ([client-id url params chs socket_ kalive-ms kalive-timer_ kalive-due?_ nattempt_ cbs-waiting_ state_ packer backoff-ms-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 757, :end-line 757, :max-fixed-arity 13, :fn-var true, :arglists (quote ([client-id url params chs socket_ kalive-ms kalive-timer_ kalive-due?_ nattempt_ cbs-waiting_ state_ packer backoff-ms-fn]))}, map->ChWebSocket {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 757, :column 12, :end-line 757, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__30242]))}, :name taoensso.sente/map->ChWebSocket, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 23, :method-params ([G__30242]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 757, :end-line 757, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__30242]))}, unpack* {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 177, :column 8, :end-line 177, :end-column 15, :private true, :arglists (quote ([packer pstr])), :doc "pstr->clj"}, :private true, :name taoensso.sente/unpack*, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 15, :method-params ([packer pstr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists (quote ([packer pstr])), :doc "pstr->clj"}, merge>chsk-state! {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/sente.cljs", :line 673, :column 8, :end-line 673, :end-column 25, :private true, :arglists (quote ([{:keys [chs state_], :as chsk} merge-state]))}, :private true, :name taoensso.sente/merge>chsk-state!, :variadic false, :file "resources/public/js/out/taoensso/sente.cljs", :end-column 25, :method-params ([p__30199 merge-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 673, :end-line 673, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [chs state_], :as chsk} merge-state]))}}, :require-macros {asyncm cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros, enc taoensso.encore, taoensso.encore taoensso.encore, timbre taoensso.timbre, taoensso.timbre taoensso.timbre}, :cljs.analyzer/constants {:seen #{:curr-xhr_ :chsk/closed ?timeout-ms :ws-kalive-ms :flush? :cb :first-open? ajax-opts cbs-waiting_ :ws namespace :get :lp-timeout-ms :chsk/recv vector? clj :client-uuid :handshake :ch-recv :malformed-event :adjusted-protocol kalive-timer_ :requested-reconnect-pending? :client-id state_ event-msg? timeout-ms :kalive-ms enc/nblank-str? :?content :else :protocol :wrong-id-type curr-xhr_ :_ :method :pathname :uid :nattempt_ :trace-evs? :packer :chs :warn :chsk/ws-ping :trace :swap/dissoc client-id :handshake? :params not= string? :recur :type kalive-ms :chsk/state :unnamespaced-id :debug :state :ajax :chsk/bad-event :requested-reconnect? enc/chan? :non-handshake nattempt_ packer chs :internal :error-handler :destroyed? or :chsk/error :host params :event have? nil? :backoff-ms-fn event-msg :wrong-type fn* :recv-buf-or-n type :socket_ :ppstr :id :open? :edn :chsk-url-fn :url :lp-timeout :chsk/timeout :handled :wrap-recv-evs? :?data :post p1__30333# :chsk ifn? :csrf-token :f :error :kalive-due?_ :send-fn taoensso.encore/nnil? :wrong-length :timeout enc/nneg-int? :resp-type backoff-ms-fn :ajax-opts id :cbs-waiting_ socket_ pstr ?cb :auto prefixed-pstr :kalive-timer_ url :timeout-ms :chsk/handshake :apparent-success :?error chsk and :state_ ?cb-fn :ajax-cb :chsk/dummy-cb-200 :<server :in kalive-due?_ :text}, :order [:wrong-type :wrong-length :else :wrong-id-type :unnamespaced-id :chsk/bad-event :malformed-event :ch-recv :state :event :id :?data :send-fn :chsk/closed :chsk/error :chsk/timeout :debug :f pstr string? :ajax-cb :trace prefixed-pstr :timeout-ms :cb or and nil? ?timeout-ms ?cb enc/nneg-int? ifn? enc/chan? :swap/dissoc :chs :state_ :requested-reconnect-pending? :open? :requested-reconnect? clj vector? :<server :chsk/handshake :handshake :non-handshake :warn :uid :csrf-token :internal :handled :client-id :url :params :socket_ :kalive-ms :kalive-timer_ :kalive-due?_ :nattempt_ :cbs-waiting_ :packer :backoff-ms-fn :flush? ?cb-fn taoensso.encore/nnil? :recur :error :apparent-success :destroyed? :chsk/ws-ping client-id url params chs socket_ kalive-ms kalive-timer_ kalive-due?_ nattempt_ cbs-waiting_ state_ packer backoff-ms-fn :ajax-opts :curr-xhr_ :method :resp-type :post :text :_ :ppstr :?error :?content :timeout :chsk/dummy-cb-200 :get :handshake? timeout-ms ajax-opts curr-xhr_ :ws-kalive-ms :lp-timeout-ms :client-uuid :edn :type :auto :host :recv-buf-or-n :wrap-recv-evs? type :in :ws :ajax have? enc/nblank-str? :lp-timeout :protocol :pathname :first-open? :chsk/state :chsk/recv namespace id fn* p1__30333# not= :chsk-url-fn chsk :chsk :trace-evs? :error-handler event-msg event-msg? :adjusted-protocol]}, :doc "Channel sockets. Otherwise known as The Shiz.\n\n      Protocol  | client>server | client>server ?+ ack/reply | server>user push\n    * WebSockets:       ✓              [1]                           ✓\n    * Ajax:            [2]              ✓                           [3]\n\n    [1] Emulate with cb-uuid wrapping.\n    [2] Emulate with dummy-cb wrapping.\n    [3] Emulate with long-polling.\n\n  Abbreviations:\n    * chsk   - Channel socket. Sente's own pseudo \"socket\".\n    * net-ch - Network channel. Underlying web server's channel. Must implement\n               Sente's async net channel interface.\n    * uid    - User-id. An application-level user identifier used for async push.\n               May have semantic meaning (e.g. username, email address), or not\n               (e.g. client/random id) - app's discretion.\n    * cb     - Callback.\n    * tout   - Timeout.\n    * ws     - WebSocket/s.\n    * pstr   - Packed string. Arbitrary Clojure data serialized as a string (e.g.\n               edn) for client<->server comms.\n\n  Special messages:\n    * Callback wrapping: [<clj> <?cb-uuid>] for [1],[2].\n    * Callback replies: :chsk/closed, :chsk/timeout, :chsk/error.\n    * Client-side events:\n        [:chsk/handshake [<?uid> <?csrf-token> <?handshake-data>]],\n        [:chsk/state <new-state>],\n        [:chsk/recv <[buffered-evs]>] ; server>user push\n\n    * Server-side events:\n        [:chsk/ws-ping],\n        [:chsk/bad-package <packed-str>],\n        [:chsk/bad-event   <chsk-event>],\n        [:chsk/uidport-open],\n        [:chsk/uidport-close].\n\n  Notable implementation details:\n    * core.async is used liberally where brute-force core.async allows for\n      significant implementation simplifications. We lean on core.async's strong\n      efficiency here.\n    * For WebSocket fallback we use long-polling rather than HTTP 1.1 streaming\n      (chunked transfer encoding). Http-kit _does_ support chunked transfer\n      encoding but a small minority of browsers &/or proxies do not. Instead of\n      implementing all 3 modes (WebSockets, streaming, long-polling) - it seemed\n      reasonable to focus on the two extremes (performance + compatibility). In\n      any case client support for WebSockets is growing rapidly so fallback\n      modes will become increasingly irrelevant while the extra simplicity will\n      continue to pay dividends.\n\n  General-use notes:\n    * Single HTTP req+session persists over entire chsk session but cannot\n      modify sessions! Use standard a/sync HTTP Ring req/resp for logins, etc.\n    * Easy to wrap standard HTTP Ring resps for transport over chsks. Prefer\n      this approach to modifying handlers (better portability)."}