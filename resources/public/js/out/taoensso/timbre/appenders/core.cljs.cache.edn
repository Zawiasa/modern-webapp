;; Analyzed by ClojureScript 1.7.122
{:use-macros {have taoensso.encore, have? taoensso.encore}, :excludes #{}, :name taoensso.timbre.appenders.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, enc taoensso.encore, taoensso.encore taoensso.encore}, :uses {}, :defs {println-appender {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/timbre/appenders/core.cljs", :line 70, :column 7, :end-line 70, :end-column 23, :arglists (quote ([& [_opts]])), :doc "Returns a simple `println` appender for Clojure/Script.\n  Use with ClojureScript requires that `cljs.core/*print-fn*` be set.\n\n  :stream (clj only) - e/o #{:auto :*out* :*err* :std-err :std-out <io-stream>}.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [([_opts])], :arglists ([& [_opts]]), :arglists-meta (nil)}}, :name taoensso.timbre.appenders.core/println-appender, :variadic true, :file "resources/public/js/out/taoensso/timbre/appenders/core.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [([_opts])], :arglists ([& [_opts]]), :arglists-meta (nil)}, :method-params [([_opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists ([& [_opts]]), :doc "Returns a simple `println` appender for Clojure/Script.\n  Use with ClojureScript requires that `cljs.core/*print-fn*` be set.\n\n  :stream (clj only) - e/o #{:auto :*out* :*err* :std-err :std-out <io-stream>}."}, console-?appender {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/taoensso/timbre/appenders/core.cljs", :line 138, :column 7, :end-line 138, :end-column 24, :arglists (quote ([])), :doc "Returns a simple js/console appender for ClojureScript, or nil if no\n  js/console exists."}, :name taoensso.timbre.appenders.core/console-?appender, :variadic false, :file "resources/public/js/out/taoensso/timbre/appenders/core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a simple js/console appender for ClojureScript, or nil if no\n  js/console exists."}}, :require-macros {enc taoensso.encore, taoensso.encore taoensso.encore}, :cljs.analyzer/constants {:seen #{:inherit :fn :timbre/raw :rate-limit :warn :enabled? :fatal :level :output-fn :vargs_ :info :min-level :error :async?}, :order [:enabled? :async? :min-level :rate-limit :output-fn :fn :inherit :fatal :error :warn :info :level :vargs_ :timbre/raw]}, :doc "Core Timbre appenders without any special dependency requirements. These can\n  be aliased into the main Timbre ns for convenience."}