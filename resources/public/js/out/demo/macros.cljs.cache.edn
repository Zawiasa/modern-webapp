{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name demo.macros, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {to-sub {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/modern-webapp/src/cljs/demo/macros.cljs", :line 3, :column 8, :end-line 3, :end-column 14, :private true, :arglists (quote ([[binding sub]]))}, :private true, :name demo.macros/to-sub, :variadic false, :file "src/cljs/demo/macros.cljs", :end-column 14, :method-params ([p__53133]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[binding sub]]))}, to-deref {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/modern-webapp/src/cljs/demo/macros.cljs", :line 7, :column 8, :end-line 7, :end-column 16, :private true, :arglists (quote ([binding]))}, :private true, :name demo.macros/to-deref, :variadic false, :file "src/cljs/demo/macros.cljs", :end-column 16, :method-params ([binding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([binding]))}, with-subs {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/modern-webapp/src/cljs/demo/macros.cljs", :line 11, :column 11, :end-line 11, :end-column 20, :macro true, :arglists (quote ([bindings & body])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name demo.macros/with-subs, :variadic true, :file "src/cljs/demo/macros.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 11, :macro true, :end-line 11, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env bindings & body])}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{cljs.core/deref re-frame.core/subscribe cljs.core/let cljs.core/fn}, :order [re-frame.core/subscribe cljs.core/deref cljs.core/let cljs.core/fn]}, :doc nil}