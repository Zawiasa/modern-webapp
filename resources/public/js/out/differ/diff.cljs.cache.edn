;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{}, :name differ.diff, :imports nil, :requires {set clojure.set, clojure.set clojure.set}, :uses nil, :defs {alterations {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/differ/diff.cljs", :line 46, :column 7, :end-line 46, :end-column 18, :arglists (quote ([state new-state])), :doc "Find elements that are different in new-state, when compared to state.\n  The datastructure returned will be of the same type as the first argument\n  passed. Works recursively on nested datastructures."}, :name differ.diff/alterations, :variadic false, :file "resources/public/js/out/differ/diff.cljs", :end-column 18, :method-params ([state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state new-state])), :doc "Find elements that are different in new-state, when compared to state.\n  The datastructure returned will be of the same type as the first argument\n  passed. Works recursively on nested datastructures."}, removals {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/differ/diff.cljs", :line 100, :column 7, :end-line 100, :end-column 15, :arglists (quote ([state new-state])), :doc "Find elements that are in state, but not in new-state.\n  The datastructure returned will be of the same type as the first argument\n  passed. Works recursively on nested datastructures."}, :name differ.diff/removals, :variadic false, :file "resources/public/js/out/differ/diff.cljs", :end-column 15, :method-params ([state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state new-state])), :doc "Find elements that are in state, but not in new-state.\n  The datastructure returned will be of the same type as the first argument\n  passed. Works recursively on nested datastructures."}, map-alterations {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/differ/diff.cljs", :line 13, :column 8, :end-line 13, :end-column 23, :private true, :arglists (quote ([state new-state]))}, :private true, :name differ.diff/map-alterations, :variadic false, :file "resources/public/js/out/differ/diff.cljs", :end-column 23, :method-params ([state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state new-state]))}, vec-alterations {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/differ/diff.cljs", :line 29, :column 8, :end-line 29, :end-column 23, :private true, :arglists (quote ([state new-state]))}, :private true, :name differ.diff/vec-alterations, :variadic false, :file "resources/public/js/out/differ/diff.cljs", :end-column 23, :method-params ([state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state new-state]))}, map-removals {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/differ/diff.cljs", :line 66, :column 8, :end-line 66, :end-column 20, :private true, :arglists (quote ([state new-state]))}, :private true, :name differ.diff/map-removals, :variadic false, :file "resources/public/js/out/differ/diff.cljs", :end-column 20, :method-params ([state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state new-state]))}, vec-removals {:protocol-inline nil, :meta {:file "/Users/paulcristian/Desktop/reframe-sente/resources/public/js/out/differ/diff.cljs", :line 81, :column 8, :end-line 81, :end-column 20, :private true, :arglists (quote ([state new-state]))}, :private true, :name differ.diff/vec-removals, :variadic false, :file "resources/public/js/out/differ/diff.cljs", :end-column 20, :method-params ([state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state new-state]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :+}, :order [:else :+]}, :doc "Provides functions to compare two clojure datastructures and return the\ndifference between them. Alterations will return the elements that differ,\nthe removals will return elements that only exist in one collection."}